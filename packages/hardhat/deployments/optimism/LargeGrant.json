{
  "address": "0x2c347833861d98ec41f8E46CE8E334D5f07e4A2E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_initialStewards",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GrantAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GrantDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientContractFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MilestoneAlreadyApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MilestoneAlreadyCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MilestoneNeedsToBeApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MilestoneZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedsApprovalFromOtherSteward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMilestones",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongMilestoneNumber",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongStageNumber",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "grantId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "AddGrant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "grantId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stageNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "AddGrantStage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "grantId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stageNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "milestoneNumber",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approvedBy",
          "type": "address"
        }
      ],
      "name": "ApproveMilestone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "grantId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBuilder",
          "type": "address"
        }
      ],
      "name": "BuilderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "completedBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "grantId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stageNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "milestoneNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proof",
          "type": "string"
        }
      ],
      "name": "CompleteMilestone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STEWARD_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_milestoneAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "addGrant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_milestoneAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "addGrantStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSteward",
          "type": "address"
        }
      ],
      "name": "addSteward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_stageNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_milestoneNumber",
          "type": "uint8"
        }
      ],
      "name": "approveMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newBuilder",
          "type": "address"
        }
      ],
      "name": "changeBuilderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_stageNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_milestoneNumber",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_proof",
          "type": "string"
        }
      ],
      "name": "completeMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        }
      ],
      "name": "grantData",
      "outputs": [
        {
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "stageNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "number",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "approvedBy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "completedBy",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            }
          ],
          "internalType": "struct LargeGrant.MilestoneData[]",
          "name": "milestones",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "grants",
      "outputs": [
        {
          "internalType": "address",
          "name": "builder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "steward",
          "type": "address"
        }
      ],
      "name": "removeSteward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6912e6809d2aab4c5fd111837470de6ec1cc700a9c878bbe5e50b4654164574",
  "receipt": {
    "to": null,
    "from": "0x9aDE9CEAf369377A1733a43C81e755503c2FfB21",
    "contractAddress": "0x2c347833861d98ec41f8E46CE8E334D5f07e4A2E",
    "transactionIndex": 34,
    "gasUsed": "2065203",
    "logsBloom": "0x000000040000000000000000000000000000000400100000000000000000000c0000100000000040000000000200000000020000000000000000000040000000000000000000000000000000000000000000000000000000000800000000000000200000020000000040000000000800000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000400000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000008000000000000100000000000030000000000000000000000000000000000001000000000000000000000000000020",
    "blockHash": "0xec2ba9d546469961892b5b46e458f6bf74f08545675be06e2c5e9a203103f648",
    "transactionHash": "0xa6912e6809d2aab4c5fd111837470de6ec1cc700a9c878bbe5e50b4654164574",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 136721656,
        "transactionHash": "0xa6912e6809d2aab4c5fd111837470de6ec1cc700a9c878bbe5e50b4654164574",
        "address": "0x2c347833861d98ec41f8E46CE8E334D5f07e4A2E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xbde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88ec",
          "0x000000000000000000000000d2cc2e47c2aecd01c87b83290c0ee76ba67a7211",
          "0x0000000000000000000000009ade9ceaf369377a1733a43c81e755503c2ffb21"
        ],
        "data": "0x",
        "logIndex": 703,
        "blockHash": "0xec2ba9d546469961892b5b46e458f6bf74f08545675be06e2c5e9a203103f648"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 136721656,
        "transactionHash": "0xa6912e6809d2aab4c5fd111837470de6ec1cc700a9c878bbe5e50b4654164574",
        "address": "0x2c347833861d98ec41f8E46CE8E334D5f07e4A2E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xbde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88ec",
          "0x00000000000000000000000054becc7560a7be76d72ed76a1f5fee6c5a2a7ab6",
          "0x0000000000000000000000009ade9ceaf369377a1733a43c81e755503c2ffb21"
        ],
        "data": "0x",
        "logIndex": 704,
        "blockHash": "0xec2ba9d546469961892b5b46e458f6bf74f08545675be06e2c5e9a203103f648"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 136721656,
        "transactionHash": "0xa6912e6809d2aab4c5fd111837470de6ec1cc700a9c878bbe5e50b4654164574",
        "address": "0x2c347833861d98ec41f8E46CE8E334D5f07e4A2E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xbde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88ec",
          "0x0000000000000000000000002d7d6ec6198adfd5850d00bd601958f6e316b05e",
          "0x0000000000000000000000009ade9ceaf369377a1733a43c81e755503c2ffb21"
        ],
        "data": "0x",
        "logIndex": 705,
        "blockHash": "0xec2ba9d546469961892b5b46e458f6bf74f08545675be06e2c5e9a203103f648"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 136721656,
        "transactionHash": "0xa6912e6809d2aab4c5fd111837470de6ec1cc700a9c878bbe5e50b4654164574",
        "address": "0x2c347833861d98ec41f8E46CE8E334D5f07e4A2E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009ade9ceaf369377a1733a43c81e755503c2ffb21",
          "0x0000000000000000000000009ade9ceaf369377a1733a43c81e755503c2ffb21"
        ],
        "data": "0x",
        "logIndex": 706,
        "blockHash": "0xec2ba9d546469961892b5b46e458f6bf74f08545675be06e2c5e9a203103f648"
      }
    ],
    "blockNumber": 136721656,
    "cumulativeGasUsed": "18898977",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b2c639c533813f4aa9d7837caf62653d097ff85",
    [
      "0xd2cc2e47c2Aecd01C87B83290c0Ee76BA67a7211",
      "0x54BeCc7560a7Be76d72ED76a1f5fee6C5a2A7Ab6",
      "0x2D7d6Ec6198ADFD5850D00BD601958F6E316b05E"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "e63aefb5ad4fe70c79140badb59070f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_initialStewards\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GrantAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GrantDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientContractFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MilestoneAlreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MilestoneAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MilestoneNeedsToBeApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MilestoneZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedsApprovalFromOtherSteward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMilestones\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongMilestoneNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongStageNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"AddGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stageNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"AddGrantStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stageNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"milestoneNumber\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approvedBy\",\"type\":\"address\"}],\"name\":\"ApproveMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBuilder\",\"type\":\"address\"}],\"name\":\"BuilderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"completedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stageNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"milestoneNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"CompleteMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STEWARD_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_milestoneAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_milestoneAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addGrantStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSteward\",\"type\":\"address\"}],\"name\":\"addSteward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_stageNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_milestoneNumber\",\"type\":\"uint8\"}],\"name\":\"approveMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newBuilder\",\"type\":\"address\"}],\"name\":\"changeBuilderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_stageNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_milestoneNumber\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_proof\",\"type\":\"string\"}],\"name\":\"completeMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"grantData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stageNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"approvedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"completedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"internalType\":\"struct LargeGrant.MilestoneData[]\",\"name\":\"milestones\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"steward\",\"type\":\"address\"}],\"name\":\"removeSteward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LargeGrant.sol\":\"LargeGrant\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/LargeGrant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nabstract contract ERC20 {\\n\\tfunction transfer(\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external virtual returns (bool);\\n\\n\\tfunction balanceOf(address account) external view virtual returns (uint256);\\n}\\n\\ncontract LargeGrant is Pausable, AccessControl {\\n\\tbytes32 public constant STEWARD_ROLE = keccak256(\\\"STEWARD_ROLE\\\");\\n\\n\\tstruct GrantData {\\n\\t\\taddress builder;\\n\\t\\tStage[] stages;\\n\\t}\\n\\n\\tstruct Stage {\\n\\t\\tuint8 number;\\n\\t\\tMilestone[] milestones;\\n\\t}\\n\\n\\tstruct Milestone {\\n\\t\\tuint8 number;\\n\\t\\tuint256 amount;\\n\\t\\taddress approvedBy;\\n\\t\\taddress completedBy;\\n\\t\\tbool completed;\\n\\t}\\n\\n\\t// used for view functions\\n\\tstruct MilestoneData {\\n\\t\\tuint8 stageNumber;\\n\\t\\tuint8 number;\\n\\t\\tuint256 amount;\\n\\t\\taddress approvedBy;\\n\\t\\taddress completedBy;\\n\\t\\tbool completed;\\n\\t}\\n\\n\\tmapping(uint256 => GrantData) public grants;\\n\\taddress public tokenAddress;\\n\\n\\tevent AddGrant(\\n\\t\\tuint256 indexed grantId,\\n\\t\\taddress indexed to,\\n\\t\\tuint256[] amounts\\n\\t);\\n\\tevent AddGrantStage(\\n\\t\\tuint256 indexed grantId,\\n\\t\\tuint8 stageNumber,\\n\\t\\tuint256[] amounts\\n\\t);\\n\\tevent ApproveMilestone(\\n\\t\\tuint256 indexed grantId,\\n\\t\\tuint8 stageNumber,\\n\\t\\tuint8 milestoneNumber,\\n\\t\\taddress indexed approvedBy\\n\\t);\\n\\tevent CompleteMilestone(\\n\\t\\taddress indexed completedBy,\\n\\t\\tuint256 indexed grantId,\\n\\t\\tuint8 stageNumber,\\n\\t\\tuint8 milestoneNumber,\\n\\t\\tuint256 amount,\\n\\t\\tstring description,\\n\\t\\tstring proof\\n\\t);\\n\\tevent BuilderChanged(uint256 indexed grantId, address indexed newBuilder);\\n\\n\\t// Custom errors\\n\\terror GrantAlreadyExists();\\n\\terror GrantDoesNotExist();\\n\\terror ZeroAddress();\\n\\terror MilestoneZeroAmount();\\n\\terror NoMilestones();\\n\\terror MilestoneAlreadyCompleted();\\n\\terror MilestoneAlreadyApproved();\\n\\terror MilestoneNeedsToBeApproved();\\n\\terror InsufficientContractFunds();\\n\\terror WrongStageNumber();\\n\\terror WrongMilestoneNumber();\\n\\terror NeedsApprovalFromOtherSteward();\\n\\terror AlreadyAdmin();\\n\\n\\tmodifier validMilestone(\\n\\t\\tuint256 _grantId,\\n\\t\\tuint8 _stageNumber,\\n\\t\\tuint8 _milestoneNumber\\n\\t) {\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (grant.builder == address(0)) {\\n\\t\\t\\trevert GrantDoesNotExist();\\n\\t\\t}\\n\\n\\t\\tif (_stageNumber == 0 || _stageNumber > grant.stages.length) {\\n\\t\\t\\trevert WrongStageNumber();\\n\\t\\t}\\n\\n\\t\\tif (\\n\\t\\t\\t_milestoneNumber > grant.stages[_stageNumber - 1].milestones.length\\n\\t\\t) {\\n\\t\\t\\trevert WrongMilestoneNumber();\\n\\t\\t}\\n\\n\\t\\tif (\\n\\t\\t\\tgrant\\n\\t\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t\\t.completed\\n\\t\\t) {\\n\\t\\t\\trevert MilestoneAlreadyCompleted();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address _tokenAddress, address[] memory _initialStewards) {\\n\\t\\ttokenAddress = _tokenAddress;\\n\\t\\tfor (uint i = 0; i < _initialStewards.length; i++) {\\n\\t\\t\\t_grantRole(STEWARD_ROLE, _initialStewards[i]);\\n\\t\\t}\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t}\\n\\n\\tfunction grantData(\\n\\t\\tuint256 _grantId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address builder, MilestoneData[] memory milestones)\\n\\t{\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\t\\tbuilder = grant.builder;\\n\\n\\t\\tuint256 milestonesCount = 0;\\n\\n\\t\\tfor (uint i = 0; i < grant.stages.length; i++) {\\n\\t\\t\\tmilestonesCount += grant.stages[i].milestones.length;\\n\\t\\t}\\n\\n\\t\\tmilestones = new MilestoneData[](milestonesCount);\\n\\n\\t\\tuint256 index = 0;\\n\\t\\tfor (uint i = 0; i < grant.stages.length; i++) {\\n\\t\\t\\tfor (uint j = 0; j < grant.stages[i].milestones.length; j++) {\\n\\t\\t\\t\\tmilestones[index] = MilestoneData({\\n\\t\\t\\t\\t\\tstageNumber: uint8(i + 1),\\n\\t\\t\\t\\t\\tnumber: grant.stages[i].milestones[j].number,\\n\\t\\t\\t\\t\\tamount: grant.stages[i].milestones[j].amount,\\n\\t\\t\\t\\t\\tcompleted: grant.stages[i].milestones[j].completed,\\n\\t\\t\\t\\t\\tapprovedBy: grant.stages[i].milestones[j].approvedBy,\\n\\t\\t\\t\\t\\tcompletedBy: grant.stages[i].milestones[j].completedBy\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addGrant(\\n\\t\\taddress _builder,\\n\\t\\tuint256 _grantId,\\n\\t\\tuint256[] memory _milestoneAmounts\\n\\t) public onlyRole(STEWARD_ROLE) {\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (grant.builder != address(0)) {\\n\\t\\t\\trevert GrantAlreadyExists();\\n\\t\\t}\\n\\n\\t\\tif (_builder == address(0)) {\\n\\t\\t\\trevert ZeroAddress();\\n\\t\\t}\\n\\n\\t\\tif (_milestoneAmounts.length == 0) {\\n\\t\\t\\trevert NoMilestones();\\n\\t\\t}\\n\\n\\t\\tgrant.builder = _builder;\\n\\n\\t\\tStage storage stage = grant.stages.push();\\n\\t\\tstage.number = 1;\\n\\n\\t\\tfor (uint i = 0; i < _milestoneAmounts.length; i++) {\\n\\t\\t\\tuint256 amount = _milestoneAmounts[i];\\n\\t\\t\\tif (amount == 0) {\\n\\t\\t\\t\\trevert MilestoneZeroAmount();\\n\\t\\t\\t}\\n\\t\\t\\tstage.milestones.push(\\n\\t\\t\\t\\tMilestone({\\n\\t\\t\\t\\t\\tnumber: uint8(i + 1),\\n\\t\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\t\\tcompleted: false,\\n\\t\\t\\t\\t\\tapprovedBy: address(0),\\n\\t\\t\\t\\t\\tcompletedBy: address(0)\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit AddGrant(_grantId, _builder, _milestoneAmounts);\\n\\t}\\n\\n\\tfunction addGrantStage(\\n\\t\\tuint256 _grantId,\\n\\t\\tuint256[] memory _milestoneAmounts\\n\\t) public onlyRole(STEWARD_ROLE) {\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (grant.builder == address(0)) {\\n\\t\\t\\trevert GrantDoesNotExist();\\n\\t\\t}\\n\\n\\t\\tif (_milestoneAmounts.length == 0) {\\n\\t\\t\\trevert NoMilestones();\\n\\t\\t}\\n\\n\\t\\tStage storage stage = grant.stages.push();\\n\\n\\t\\tstage.number = uint8(grant.stages.length);\\n\\n\\t\\tfor (uint i = 0; i < _milestoneAmounts.length; i++) {\\n\\t\\t\\tuint256 amount = _milestoneAmounts[i];\\n\\t\\t\\tif (amount == 0) {\\n\\t\\t\\t\\trevert MilestoneZeroAmount();\\n\\t\\t\\t}\\n\\t\\t\\tstage.milestones.push(\\n\\t\\t\\t\\tMilestone({\\n\\t\\t\\t\\t\\tnumber: uint8(i + 1),\\n\\t\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\t\\tcompleted: false,\\n\\t\\t\\t\\t\\tapprovedBy: address(0),\\n\\t\\t\\t\\t\\tcompletedBy: address(0)\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit AddGrantStage(\\n\\t\\t\\t_grantId,\\n\\t\\t\\tuint8(grant.stages.length),\\n\\t\\t\\t_milestoneAmounts\\n\\t\\t);\\n\\t}\\n\\n\\tfunction approveMilestone(\\n\\t\\tuint256 _grantId,\\n\\t\\tuint8 _stageNumber,\\n\\t\\tuint8 _milestoneNumber\\n\\t)\\n\\t\\tpublic\\n\\t\\twhenNotPaused\\n\\t\\tonlyRole(STEWARD_ROLE)\\n\\t\\tvalidMilestone(_grantId, _stageNumber, _milestoneNumber)\\n\\t{\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (\\n\\t\\t\\tgrant\\n\\t\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t\\t.approvedBy != address(0)\\n\\t\\t) {\\n\\t\\t\\trevert MilestoneAlreadyApproved();\\n\\t\\t}\\n\\n\\t\\tgrant\\n\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t.approvedBy = msg.sender;\\n\\n\\t\\temit ApproveMilestone(\\n\\t\\t\\t_grantId,\\n\\t\\t\\t_stageNumber,\\n\\t\\t\\t_milestoneNumber,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\t}\\n\\n\\tfunction completeMilestone(\\n\\t\\tuint256 _grantId,\\n\\t\\tuint8 _stageNumber,\\n\\t\\tuint8 _milestoneNumber,\\n\\t\\tstring memory _description,\\n\\t\\tstring memory _proof\\n\\t)\\n\\t\\tpublic\\n\\t\\twhenNotPaused\\n\\t\\tonlyRole(STEWARD_ROLE)\\n\\t\\tvalidMilestone(_grantId, _stageNumber, _milestoneNumber)\\n\\t{\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (\\n\\t\\t\\tgrant\\n\\t\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t\\t.approvedBy == address(0)\\n\\t\\t) {\\n\\t\\t\\trevert MilestoneNeedsToBeApproved();\\n\\t\\t}\\n\\n\\t\\tif (\\n\\t\\t\\tgrant\\n\\t\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t\\t.approvedBy == msg.sender\\n\\t\\t) {\\n\\t\\t\\trevert NeedsApprovalFromOtherSteward();\\n\\t\\t}\\n\\n\\t\\tuint256 amount = grant\\n\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t.amount;\\n\\n\\t\\tif (ERC20(tokenAddress).balanceOf(address(this)) < amount)\\n\\t\\t\\trevert InsufficientContractFunds();\\n\\n\\t\\tERC20(tokenAddress).transfer(grant.builder, amount);\\n\\n\\t\\tgrant\\n\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t.completed = true;\\n\\n\\t\\tgrant\\n\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t.completedBy = msg.sender;\\n\\n\\t\\temit CompleteMilestone(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_grantId,\\n\\t\\t\\t_stageNumber,\\n\\t\\t\\t_milestoneNumber,\\n\\t\\t\\tamount,\\n\\t\\t\\t_description,\\n\\t\\t\\t_proof\\n\\t\\t);\\n\\t}\\n\\n\\tfunction changeBuilderAddress(\\n\\t\\tuint256 _grantId,\\n\\t\\taddress _newBuilder\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tif (_newBuilder == address(0)) {\\n\\t\\t\\trevert ZeroAddress();\\n\\t\\t}\\n\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (grant.builder == address(0)) {\\n\\t\\t\\trevert GrantDoesNotExist();\\n\\t\\t}\\n\\n\\t\\tgrant.builder = _newBuilder;\\n\\n\\t\\temit BuilderChanged(_grantId, _newBuilder);\\n\\t}\\n\\n\\tfunction addSteward(\\n\\t\\taddress newSteward\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tgrantRole(STEWARD_ROLE, newSteward);\\n\\t}\\n\\n\\tfunction removeSteward(\\n\\t\\taddress steward\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trevokeRole(STEWARD_ROLE, steward);\\n\\t}\\n\\n\\tfunction transferAdmin(\\n\\t\\taddress newAdmin\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tif (hasRole(DEFAULT_ADMIN_ROLE, newAdmin)) revert AlreadyAdmin();\\n\\n\\t\\tgrantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n\\t\\trenounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t}\\n\\n\\tfunction pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\tfunction withdrawFunds(address _token) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tuint256 remainingBalance = ERC20(_token).balanceOf(address(this));\\n\\n\\t\\tif (remainingBalance > 0) {\\n\\t\\t\\tERC20(_token).transfer(msg.sender, remainingBalance);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xcd05d41748379720dfa22314d090887e8746046d40a5e97b6c149008cca54cdd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620024c9380380620024c98339810160408190526200003491620001a5565b6000805460ff19168155600380546001600160a01b0319166001600160a01b0385161790555b8151811015620000c757620000b27fbde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88ec8383815181106200009e576200009e6200028e565b6020026020010151620000dd60201b60201c565b80620000be81620002a4565b9150506200005a565b50620000d560003362000166565b5050620002cc565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620001625760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45b5050565b620001628282620000dd565b80516001600160a01b03811681146200018a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620001b957600080fd5b620001c48362000172565b602084810151919350906001600160401b0380821115620001e457600080fd5b818601915086601f830112620001f957600080fd5b8151818111156200020e576200020e6200018f565b8060051b604051601f19603f830116810181811085821117156200023657620002366200018f565b6040529182528482019250838101850191898311156200025557600080fd5b938501935b828510156200027e576200026e8562000172565b845293850193928501926200025a565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b600060018201620002c557634e487b7160e01b600052601160045260246000fd5b5060010190565b6121ed80620002dc6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806368742da6116100c3578063b1bbdd751161007c578063b1bbdd75146102e0578063b75942f7146102f3578063caab072914610306578063d547741f14610319578063d7972ab91461032c578063e5c889871461033f57600080fd5b806368742da61461028457806375829def146102975780638456cb59146102aa57806391d14854146102b25780639d76ea58146102c5578063a217fddf146102d857600080fd5b806336568abe1161011557806336568abe146102235780633f4ba83a14610236578063424f48c21461023e5780635c975abb14610251578063643059161461025c578063676bb0ca1461027157600080fd5b806301ffc9a7146101525780630c0debea1461017a578063248a9ca3146101bb5780632f2ff15d146101ed5780632f9c652e14610202575b600080fd5b610165610160366004611b3b565b610352565b60405190151581526020015b60405180910390f35b6101a3610188366004611b65565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610171565b6101df6101c9366004611b65565b6000908152600160208190526040909120015490565b604051908152602001610171565b6102006101fb366004611b9a565b610389565b005b610215610210366004611b65565b6103b4565b604051610171929190611bc6565b610200610231366004611b9a565b610719565b61020061079c565b61020061024c366004611d26565b6107b2565b60005460ff16610165565b6101df60008051602061219883398151915281565b61020061027f366004611db5565b610d33565b610200610292366004611df1565b611039565b6102006102a5366004611df1565b61112e565b610200611178565b6101656102c0366004611b9a565b61118b565b6003546101a3906001600160a01b031681565b6101df600081565b6102006102ee366004611e8c565b6111b6565b610200610301366004611ed3565b6113c6565b610200610314366004611df1565b611611565b610200610327366004611b9a565b611634565b61020061033a366004611b9a565b61165a565b61020061034d366004611df1565b61170e565b60006001600160e01b03198216637965db0b60e01b148061038357506301ffc9a760e01b6001600160e01b03198316145b92915050565b600082815260016020819052604090912001546103a581611731565b6103af838361173b565b505050565b600081815260026020526040812080546001600160a01b03169160609190805b6001830154811015610427578260010181815481106103f5576103f5611f2a565b60009182526020909120600160029092020101546104139083611f56565b91508061041f81611f69565b9150506103d4565b508067ffffffffffffffff81111561044157610441611c6f565b6040519080825280602002602001820160405280156104a157816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a0820152825260001990920191018161045f5790505b5092506000805b60018401548110156107105760005b8460010182815481106104cc576104cc611f2a565b9060005260206000209060020201600101805490508110156106fd576040518060c001604052808360016105009190611f56565b60ff16815260200186600101848154811061051d5761051d611f2a565b9060005260206000209060020201600101838154811061053f5761053f611f2a565b60009182526020918290206004909102015460ff16825260018801805492909101918590811061057157610571611f2a565b9060005260206000209060020201600101838154811061059357610593611f2a565b90600052602060002090600402016001015481526020018660010184815481106105bf576105bf611f2a565b906000526020600020906002020160010183815481106105e1576105e1611f2a565b6000918252602091829020600260049092020101546001600160a01b0316825260018801805492909101918590811061061c5761061c611f2a565b9060005260206000209060020201600101838154811061063e5761063e611f2a565b6000918252602091829020600360049092020101546001600160a01b0316825260018801805492909101918590811061067957610679611f2a565b9060005260206000209060020201600101838154811061069b5761069b611f2a565b906000526020600020906004020160030160149054906101000a900460ff1615158152508684815181106106d1576106d1611f2a565b602002602001018190525082806106e790611f69565b93505080806106f590611f69565b9150506104b7565b508061070881611f69565b9150506104a8565b50505050915091565b6001600160a01b038116331461078e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61079882826117a6565b5050565b60006107a781611731565b6107af61180d565b50565b6107ba61185f565b6000805160206121988339815191526107d281611731565b60008681526002602052604090208054879187918791906001600160a01b031661080f57604051639bfaf8b960e01b815260040160405180910390fd5b60ff831615806108255750600181015460ff8416115b1561084357604051633dea701360e11b815260040160405180910390fd5b806001016001846108549190611f82565b60ff168154811061086757610867611f2a565b9060005260206000209060020201600101805490508260ff16111561089f576040516331ca8e3960e11b815260040160405180910390fd5b806001016001846108b09190611f82565b60ff16815481106108c3576108c3611f2a565b90600052602060002090600202016001016001836108e19190611f82565b60ff16815481106108f4576108f4611f2a565b906000526020600020906004020160030160149054906101000a900460ff161561093157604051634cf723ed60e01b815260040160405180910390fd5b60008a815260026020526040812090600180830190610950908d611f82565b60ff168154811061096357610963611f2a565b906000526020600020906002020160010160018b6109819190611f82565b60ff168154811061099457610994611f2a565b60009182526020909120600260049092020101546001600160a01b0316036109cf57604051633fe9403960e11b815260040160405180910390fd5b336001808301906109e0908d611f82565b60ff16815481106109f3576109f3611f2a565b906000526020600020906002020160010160018b610a119190611f82565b60ff1681548110610a2457610a24611f2a565b60009182526020909120600260049092020101546001600160a01b031603610a5f576040516321304aa360e11b815260040160405180910390fd5b60008160010160018c610a729190611f82565b60ff1681548110610a8557610a85611f2a565b906000526020600020906002020160010160018b610aa39190611f82565b60ff1681548110610ab657610ab6611f2a565b60009182526020909120600491820201600101546003546040516370a0823160e01b8152309381019390935290925082916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3d9190611f9b565b1015610b5c5760405163a3fb8f9d60e01b815260040160405180910390fd5b600354825460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190611fb4565b506001828101610be4828e611f82565b60ff1681548110610bf757610bf7611f2a565b906000526020600020906002020160010160018c610c159190611f82565b60ff1681548110610c2857610c28611f2a565b906000526020600020906004020160030160146101000a81548160ff021916908315150217905550338260010160018d610c629190611f82565b60ff1681548110610c7557610c75611f2a565b906000526020600020906002020160010160018c610c939190611f82565b60ff1681548110610ca657610ca6611f2a565b906000526020600020906004020160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b336001600160a01b03167f72abd0da86376befd0fbb67b56a7a2af667bc7fc3383f22b8cfcb5f52c0427278d8d858e8e604051610d1d959493929190612026565b60405180910390a3505050505050505050505050565b610d3b61185f565b600080516020612198833981519152610d5381611731565b60008481526002602052604090208054859185918591906001600160a01b0316610d9057604051639bfaf8b960e01b815260040160405180910390fd5b60ff83161580610da65750600181015460ff8416115b15610dc457604051633dea701360e11b815260040160405180910390fd5b80600101600184610dd59190611f82565b60ff1681548110610de857610de8611f2a565b9060005260206000209060020201600101805490508260ff161115610e20576040516331ca8e3960e11b815260040160405180910390fd5b80600101600184610e319190611f82565b60ff1681548110610e4457610e44611f2a565b9060005260206000209060020201600101600183610e629190611f82565b60ff1681548110610e7557610e75611f2a565b906000526020600020906004020160030160149054906101000a900460ff1615610eb257604051634cf723ed60e01b815260040160405180910390fd5b600088815260026020526040812090600180830190610ed1908b611f82565b60ff1681548110610ee457610ee4611f2a565b9060005260206000209060020201600101600189610f029190611f82565b60ff1681548110610f1557610f15611f2a565b60009182526020909120600260049092020101546001600160a01b031614610f5057604051630535ed3960e41b815260040160405180910390fd5b338160010160018a610f629190611f82565b60ff1681548110610f7557610f75611f2a565b9060005260206000209060020201600101600189610f939190611f82565b60ff1681548110610fa657610fa6611f2a565b906000526020600020906004020160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550336001600160a01b0316897f79d5a3d0c1f411a1366ed6aa9d367fcb88b5c450d080d8ef6a98b5a5564b39bb8a8a60405161102692919060ff92831681529116602082015260400190565b60405180910390a3505050505050505050565b600061104481611731565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561108b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110af9190611f9b565b905080156103af5760405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015611104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111289190611fb4565b50505050565b600061113981611731565b61114460008361118b565b1561116257604051631c3681a560e11b815260040160405180910390fd5b61116d600083610389565b610798600033610719565b600061118381611731565b6107af6118a7565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206121988339815191526111ce81611731565b600083815260026020526040902080546001600160a01b031661120457604051639bfaf8b960e01b815260040160405180910390fd5b825160000361122657604051631712a07360e21b815260040160405180910390fd5b600181810180549182018082556000918252602082206002909302909201805460ff191660ff9093169290921782555b845181101561137e57600085828151811061127357611273611f2a565b602002602001015190508060000361129e5760405163661425c560e01b815260040160405180910390fd5b826001016040518060a001604052808460016112ba9190611f56565b60ff90811682526020808301959095526000604080840182905260608085018390526080948501839052865460018082018955978452928890208651600490940201805460ff1916939094169290921783559584015194820194909455938201516002850180546001600160a01b0319166001600160a01b0392831617905592820151600390940180549290910151939092166001600160a81b031990911617600160a01b921515929092029190911790558061137681611f69565b915050611256565b50600182015460405186917fb89a18737047fddd3ef8fcad9989a4135edcfa3f60e09630367cc801e100ee35916113b7919088906120aa565b60405180910390a25050505050565b6000805160206121988339815191526113de81611731565b600083815260026020526040902080546001600160a01b03161561141557604051631750e92d60e11b815260040160405180910390fd5b6001600160a01b03851661143c5760405163d92e233d60e01b815260040160405180910390fd5b825160000361145e57604051631712a07360e21b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b038616178155600180820180548083018255600091825260208220600290910201805460ff191690921782555b84518110156115c65760008582815181106114bb576114bb611f2a565b60200260200101519050806000036114e65760405163661425c560e01b815260040160405180910390fd5b826001016040518060a001604052808460016115029190611f56565b60ff90811682526020808301959095526000604080840182905260608085018390526080948501839052865460018082018955978452928890208651600490940201805460ff1916939094169290921783559584015194820194909455938201516002850180546001600160a01b0319166001600160a01b0392831617905592820151600390940180549290910151939092166001600160a81b031990911617600160a01b92151592909202919091179055806115be81611f69565b91505061149e565b50856001600160a01b0316857f216f429a39cd81efeeb1ca75c55036d93fb1388e004101fd68549352f224a8258660405161160191906120ce565b60405180910390a3505050505050565b600061161c81611731565b61079860008051602061219883398151915283610389565b6000828152600160208190526040909120015461165081611731565b6103af83836117a6565b600061166581611731565b6001600160a01b03821661168c5760405163d92e233d60e01b815260040160405180910390fd5b600083815260026020526040902080546001600160a01b03166116c257604051639bfaf8b960e01b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b038416908117825560405185907f1e410b55c818b30b1a663bc61e32e940872f015d621e8f375c7cd7bb6079de4690600090a350505050565b600061171981611731565b61079860008051602061219883398151915283611634565b6107af81336118e4565b611745828261118b565b6107985760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6117b0828261118b565b156107985760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61181561193d565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16156118a55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610785565b565b6118af61185f565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118423390565b6118ee828261118b565b610798576118fb81611986565b611906836020611998565b6040516020016119179291906120e1565b60408051601f198184030181529082905262461bcd60e51b825261078591600401612156565b60005460ff166118a55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610785565b60606103836001600160a01b03831660145b606060006119a7836002612169565b6119b2906002611f56565b67ffffffffffffffff8111156119ca576119ca611c6f565b6040519080825280601f01601f1916602001820160405280156119f4576020820181803683370190505b509050600360fc1b81600081518110611a0f57611a0f611f2a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a3e57611a3e611f2a565b60200101906001600160f81b031916908160001a9053506000611a62846002612169565b611a6d906001611f56565b90505b6001811115611ae5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611aa157611aa1611f2a565b1a60f81b828281518110611ab757611ab7611f2a565b60200101906001600160f81b031916908160001a90535060049490941c93611ade81612180565b9050611a70565b508315611b345760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610785565b9392505050565b600060208284031215611b4d57600080fd5b81356001600160e01b031981168114611b3457600080fd5b600060208284031215611b7757600080fd5b5035919050565b80356001600160a01b0381168114611b9557600080fd5b919050565b60008060408385031215611bad57600080fd5b82359150611bbd60208401611b7e565b90509250929050565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190888301875b82811015611c4e578151805160ff908116865286820151168686015288810151898601528781015187168886015260808082015188169086015260a09081015115159085015260c09093019290840190600101611bf6565b50919a9950505050505050505050565b803560ff81168114611b9557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611cae57611cae611c6f565b604052919050565b600082601f830112611cc757600080fd5b813567ffffffffffffffff811115611ce157611ce1611c6f565b611cf4601f8201601f1916602001611c85565b818152846020838601011115611d0957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611d3e57600080fd5b85359450611d4e60208701611c5e565b9350611d5c60408701611c5e565b9250606086013567ffffffffffffffff80821115611d7957600080fd5b611d8589838a01611cb6565b93506080880135915080821115611d9b57600080fd5b50611da888828901611cb6565b9150509295509295909350565b600080600060608486031215611dca57600080fd5b83359250611dda60208501611c5e565b9150611de860408501611c5e565b90509250925092565b600060208284031215611e0357600080fd5b611b3482611b7e565b600082601f830112611e1d57600080fd5b8135602067ffffffffffffffff821115611e3957611e39611c6f565b8160051b611e48828201611c85565b9283528481018201928281019087851115611e6257600080fd5b83870192505b84831015611e8157823582529183019190830190611e68565b979650505050505050565b60008060408385031215611e9f57600080fd5b82359150602083013567ffffffffffffffff811115611ebd57600080fd5b611ec985828601611e0c565b9150509250929050565b600080600060608486031215611ee857600080fd5b611ef184611b7e565b925060208401359150604084013567ffffffffffffffff811115611f1457600080fd5b611f2086828701611e0c565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561038357610383611f40565b600060018201611f7b57611f7b611f40565b5060010190565b60ff828116828216039081111561038357610383611f40565b600060208284031215611fad57600080fd5b5051919050565b600060208284031215611fc657600080fd5b81518015158114611b3457600080fd5b60005b83811015611ff1578181015183820152602001611fd9565b50506000910152565b60008151808452612012816020860160208601611fd6565b601f01601f19169290920160200192915050565b60ff8616815260ff8516602082015283604082015260a06060820152600061205160a0830185611ffa565b82810360808401526120638185611ffa565b98975050505050505050565b600081518084526020808501945080840160005b8381101561209f57815187529582019590820190600101612083565b509495945050505050565b60ff831681526040602082015260006120c6604083018461206f565b949350505050565b602081526000611b34602083018461206f565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612119816017850160208801611fd6565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161214a816028840160208801611fd6565b01602801949350505050565b602081526000611b346020830184611ffa565b808202811582820484141761038357610383611f40565b60008161218f5761218f611f40565b50600019019056febde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88eca2646970667358221220a2f76166fffac2753bfc5dbdf74c6af6fc85839156c2c0ac5cc4d718fdd07eed64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806368742da6116100c3578063b1bbdd751161007c578063b1bbdd75146102e0578063b75942f7146102f3578063caab072914610306578063d547741f14610319578063d7972ab91461032c578063e5c889871461033f57600080fd5b806368742da61461028457806375829def146102975780638456cb59146102aa57806391d14854146102b25780639d76ea58146102c5578063a217fddf146102d857600080fd5b806336568abe1161011557806336568abe146102235780633f4ba83a14610236578063424f48c21461023e5780635c975abb14610251578063643059161461025c578063676bb0ca1461027157600080fd5b806301ffc9a7146101525780630c0debea1461017a578063248a9ca3146101bb5780632f2ff15d146101ed5780632f9c652e14610202575b600080fd5b610165610160366004611b3b565b610352565b60405190151581526020015b60405180910390f35b6101a3610188366004611b65565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610171565b6101df6101c9366004611b65565b6000908152600160208190526040909120015490565b604051908152602001610171565b6102006101fb366004611b9a565b610389565b005b610215610210366004611b65565b6103b4565b604051610171929190611bc6565b610200610231366004611b9a565b610719565b61020061079c565b61020061024c366004611d26565b6107b2565b60005460ff16610165565b6101df60008051602061219883398151915281565b61020061027f366004611db5565b610d33565b610200610292366004611df1565b611039565b6102006102a5366004611df1565b61112e565b610200611178565b6101656102c0366004611b9a565b61118b565b6003546101a3906001600160a01b031681565b6101df600081565b6102006102ee366004611e8c565b6111b6565b610200610301366004611ed3565b6113c6565b610200610314366004611df1565b611611565b610200610327366004611b9a565b611634565b61020061033a366004611b9a565b61165a565b61020061034d366004611df1565b61170e565b60006001600160e01b03198216637965db0b60e01b148061038357506301ffc9a760e01b6001600160e01b03198316145b92915050565b600082815260016020819052604090912001546103a581611731565b6103af838361173b565b505050565b600081815260026020526040812080546001600160a01b03169160609190805b6001830154811015610427578260010181815481106103f5576103f5611f2a565b60009182526020909120600160029092020101546104139083611f56565b91508061041f81611f69565b9150506103d4565b508067ffffffffffffffff81111561044157610441611c6f565b6040519080825280602002602001820160405280156104a157816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a0820152825260001990920191018161045f5790505b5092506000805b60018401548110156107105760005b8460010182815481106104cc576104cc611f2a565b9060005260206000209060020201600101805490508110156106fd576040518060c001604052808360016105009190611f56565b60ff16815260200186600101848154811061051d5761051d611f2a565b9060005260206000209060020201600101838154811061053f5761053f611f2a565b60009182526020918290206004909102015460ff16825260018801805492909101918590811061057157610571611f2a565b9060005260206000209060020201600101838154811061059357610593611f2a565b90600052602060002090600402016001015481526020018660010184815481106105bf576105bf611f2a565b906000526020600020906002020160010183815481106105e1576105e1611f2a565b6000918252602091829020600260049092020101546001600160a01b0316825260018801805492909101918590811061061c5761061c611f2a565b9060005260206000209060020201600101838154811061063e5761063e611f2a565b6000918252602091829020600360049092020101546001600160a01b0316825260018801805492909101918590811061067957610679611f2a565b9060005260206000209060020201600101838154811061069b5761069b611f2a565b906000526020600020906004020160030160149054906101000a900460ff1615158152508684815181106106d1576106d1611f2a565b602002602001018190525082806106e790611f69565b93505080806106f590611f69565b9150506104b7565b508061070881611f69565b9150506104a8565b50505050915091565b6001600160a01b038116331461078e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61079882826117a6565b5050565b60006107a781611731565b6107af61180d565b50565b6107ba61185f565b6000805160206121988339815191526107d281611731565b60008681526002602052604090208054879187918791906001600160a01b031661080f57604051639bfaf8b960e01b815260040160405180910390fd5b60ff831615806108255750600181015460ff8416115b1561084357604051633dea701360e11b815260040160405180910390fd5b806001016001846108549190611f82565b60ff168154811061086757610867611f2a565b9060005260206000209060020201600101805490508260ff16111561089f576040516331ca8e3960e11b815260040160405180910390fd5b806001016001846108b09190611f82565b60ff16815481106108c3576108c3611f2a565b90600052602060002090600202016001016001836108e19190611f82565b60ff16815481106108f4576108f4611f2a565b906000526020600020906004020160030160149054906101000a900460ff161561093157604051634cf723ed60e01b815260040160405180910390fd5b60008a815260026020526040812090600180830190610950908d611f82565b60ff168154811061096357610963611f2a565b906000526020600020906002020160010160018b6109819190611f82565b60ff168154811061099457610994611f2a565b60009182526020909120600260049092020101546001600160a01b0316036109cf57604051633fe9403960e11b815260040160405180910390fd5b336001808301906109e0908d611f82565b60ff16815481106109f3576109f3611f2a565b906000526020600020906002020160010160018b610a119190611f82565b60ff1681548110610a2457610a24611f2a565b60009182526020909120600260049092020101546001600160a01b031603610a5f576040516321304aa360e11b815260040160405180910390fd5b60008160010160018c610a729190611f82565b60ff1681548110610a8557610a85611f2a565b906000526020600020906002020160010160018b610aa39190611f82565b60ff1681548110610ab657610ab6611f2a565b60009182526020909120600491820201600101546003546040516370a0823160e01b8152309381019390935290925082916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3d9190611f9b565b1015610b5c5760405163a3fb8f9d60e01b815260040160405180910390fd5b600354825460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190611fb4565b506001828101610be4828e611f82565b60ff1681548110610bf757610bf7611f2a565b906000526020600020906002020160010160018c610c159190611f82565b60ff1681548110610c2857610c28611f2a565b906000526020600020906004020160030160146101000a81548160ff021916908315150217905550338260010160018d610c629190611f82565b60ff1681548110610c7557610c75611f2a565b906000526020600020906002020160010160018c610c939190611f82565b60ff1681548110610ca657610ca6611f2a565b906000526020600020906004020160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b336001600160a01b03167f72abd0da86376befd0fbb67b56a7a2af667bc7fc3383f22b8cfcb5f52c0427278d8d858e8e604051610d1d959493929190612026565b60405180910390a3505050505050505050505050565b610d3b61185f565b600080516020612198833981519152610d5381611731565b60008481526002602052604090208054859185918591906001600160a01b0316610d9057604051639bfaf8b960e01b815260040160405180910390fd5b60ff83161580610da65750600181015460ff8416115b15610dc457604051633dea701360e11b815260040160405180910390fd5b80600101600184610dd59190611f82565b60ff1681548110610de857610de8611f2a565b9060005260206000209060020201600101805490508260ff161115610e20576040516331ca8e3960e11b815260040160405180910390fd5b80600101600184610e319190611f82565b60ff1681548110610e4457610e44611f2a565b9060005260206000209060020201600101600183610e629190611f82565b60ff1681548110610e7557610e75611f2a565b906000526020600020906004020160030160149054906101000a900460ff1615610eb257604051634cf723ed60e01b815260040160405180910390fd5b600088815260026020526040812090600180830190610ed1908b611f82565b60ff1681548110610ee457610ee4611f2a565b9060005260206000209060020201600101600189610f029190611f82565b60ff1681548110610f1557610f15611f2a565b60009182526020909120600260049092020101546001600160a01b031614610f5057604051630535ed3960e41b815260040160405180910390fd5b338160010160018a610f629190611f82565b60ff1681548110610f7557610f75611f2a565b9060005260206000209060020201600101600189610f939190611f82565b60ff1681548110610fa657610fa6611f2a565b906000526020600020906004020160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550336001600160a01b0316897f79d5a3d0c1f411a1366ed6aa9d367fcb88b5c450d080d8ef6a98b5a5564b39bb8a8a60405161102692919060ff92831681529116602082015260400190565b60405180910390a3505050505050505050565b600061104481611731565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa15801561108b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110af9190611f9b565b905080156103af5760405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0384169063a9059cbb906044016020604051808303816000875af1158015611104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111289190611fb4565b50505050565b600061113981611731565b61114460008361118b565b1561116257604051631c3681a560e11b815260040160405180910390fd5b61116d600083610389565b610798600033610719565b600061118381611731565b6107af6118a7565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206121988339815191526111ce81611731565b600083815260026020526040902080546001600160a01b031661120457604051639bfaf8b960e01b815260040160405180910390fd5b825160000361122657604051631712a07360e21b815260040160405180910390fd5b600181810180549182018082556000918252602082206002909302909201805460ff191660ff9093169290921782555b845181101561137e57600085828151811061127357611273611f2a565b602002602001015190508060000361129e5760405163661425c560e01b815260040160405180910390fd5b826001016040518060a001604052808460016112ba9190611f56565b60ff90811682526020808301959095526000604080840182905260608085018390526080948501839052865460018082018955978452928890208651600490940201805460ff1916939094169290921783559584015194820194909455938201516002850180546001600160a01b0319166001600160a01b0392831617905592820151600390940180549290910151939092166001600160a81b031990911617600160a01b921515929092029190911790558061137681611f69565b915050611256565b50600182015460405186917fb89a18737047fddd3ef8fcad9989a4135edcfa3f60e09630367cc801e100ee35916113b7919088906120aa565b60405180910390a25050505050565b6000805160206121988339815191526113de81611731565b600083815260026020526040902080546001600160a01b03161561141557604051631750e92d60e11b815260040160405180910390fd5b6001600160a01b03851661143c5760405163d92e233d60e01b815260040160405180910390fd5b825160000361145e57604051631712a07360e21b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b038616178155600180820180548083018255600091825260208220600290910201805460ff191690921782555b84518110156115c65760008582815181106114bb576114bb611f2a565b60200260200101519050806000036114e65760405163661425c560e01b815260040160405180910390fd5b826001016040518060a001604052808460016115029190611f56565b60ff90811682526020808301959095526000604080840182905260608085018390526080948501839052865460018082018955978452928890208651600490940201805460ff1916939094169290921783559584015194820194909455938201516002850180546001600160a01b0319166001600160a01b0392831617905592820151600390940180549290910151939092166001600160a81b031990911617600160a01b92151592909202919091179055806115be81611f69565b91505061149e565b50856001600160a01b0316857f216f429a39cd81efeeb1ca75c55036d93fb1388e004101fd68549352f224a8258660405161160191906120ce565b60405180910390a3505050505050565b600061161c81611731565b61079860008051602061219883398151915283610389565b6000828152600160208190526040909120015461165081611731565b6103af83836117a6565b600061166581611731565b6001600160a01b03821661168c5760405163d92e233d60e01b815260040160405180910390fd5b600083815260026020526040902080546001600160a01b03166116c257604051639bfaf8b960e01b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b038416908117825560405185907f1e410b55c818b30b1a663bc61e32e940872f015d621e8f375c7cd7bb6079de4690600090a350505050565b600061171981611731565b61079860008051602061219883398151915283611634565b6107af81336118e4565b611745828261118b565b6107985760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6117b0828261118b565b156107985760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61181561193d565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16156118a55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610785565b565b6118af61185f565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118423390565b6118ee828261118b565b610798576118fb81611986565b611906836020611998565b6040516020016119179291906120e1565b60408051601f198184030181529082905262461bcd60e51b825261078591600401612156565b60005460ff166118a55760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610785565b60606103836001600160a01b03831660145b606060006119a7836002612169565b6119b2906002611f56565b67ffffffffffffffff8111156119ca576119ca611c6f565b6040519080825280601f01601f1916602001820160405280156119f4576020820181803683370190505b509050600360fc1b81600081518110611a0f57611a0f611f2a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611a3e57611a3e611f2a565b60200101906001600160f81b031916908160001a9053506000611a62846002612169565b611a6d906001611f56565b90505b6001811115611ae5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611aa157611aa1611f2a565b1a60f81b828281518110611ab757611ab7611f2a565b60200101906001600160f81b031916908160001a90535060049490941c93611ade81612180565b9050611a70565b508315611b345760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610785565b9392505050565b600060208284031215611b4d57600080fd5b81356001600160e01b031981168114611b3457600080fd5b600060208284031215611b7757600080fd5b5035919050565b80356001600160a01b0381168114611b9557600080fd5b919050565b60008060408385031215611bad57600080fd5b82359150611bbd60208401611b7e565b90509250929050565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190888301875b82811015611c4e578151805160ff908116865286820151168686015288810151898601528781015187168886015260808082015188169086015260a09081015115159085015260c09093019290840190600101611bf6565b50919a9950505050505050505050565b803560ff81168114611b9557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611cae57611cae611c6f565b604052919050565b600082601f830112611cc757600080fd5b813567ffffffffffffffff811115611ce157611ce1611c6f565b611cf4601f8201601f1916602001611c85565b818152846020838601011115611d0957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611d3e57600080fd5b85359450611d4e60208701611c5e565b9350611d5c60408701611c5e565b9250606086013567ffffffffffffffff80821115611d7957600080fd5b611d8589838a01611cb6565b93506080880135915080821115611d9b57600080fd5b50611da888828901611cb6565b9150509295509295909350565b600080600060608486031215611dca57600080fd5b83359250611dda60208501611c5e565b9150611de860408501611c5e565b90509250925092565b600060208284031215611e0357600080fd5b611b3482611b7e565b600082601f830112611e1d57600080fd5b8135602067ffffffffffffffff821115611e3957611e39611c6f565b8160051b611e48828201611c85565b9283528481018201928281019087851115611e6257600080fd5b83870192505b84831015611e8157823582529183019190830190611e68565b979650505050505050565b60008060408385031215611e9f57600080fd5b82359150602083013567ffffffffffffffff811115611ebd57600080fd5b611ec985828601611e0c565b9150509250929050565b600080600060608486031215611ee857600080fd5b611ef184611b7e565b925060208401359150604084013567ffffffffffffffff811115611f1457600080fd5b611f2086828701611e0c565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561038357610383611f40565b600060018201611f7b57611f7b611f40565b5060010190565b60ff828116828216039081111561038357610383611f40565b600060208284031215611fad57600080fd5b5051919050565b600060208284031215611fc657600080fd5b81518015158114611b3457600080fd5b60005b83811015611ff1578181015183820152602001611fd9565b50506000910152565b60008151808452612012816020860160208601611fd6565b601f01601f19169290920160200192915050565b60ff8616815260ff8516602082015283604082015260a06060820152600061205160a0830185611ffa565b82810360808401526120638185611ffa565b98975050505050505050565b600081518084526020808501945080840160005b8381101561209f57815187529582019590820190600101612083565b509495945050505050565b60ff831681526040602082015260006120c6604083018461206f565b949350505050565b602081526000611b34602083018461206f565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612119816017850160208801611fd6565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161214a816028840160208801611fd6565b01602801949350505050565b602081526000611b346020830184611ffa565b808202811582820484141761038357610383611f40565b60008161218f5761218f611f40565b50600019019056febde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88eca2646970667358221220a2f76166fffac2753bfc5dbdf74c6af6fc85839156c2c0ac5cc4d718fdd07eed64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 406,
        "contract": "contracts/LargeGrant.sol:LargeGrant",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/LargeGrant.sol:LargeGrant",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1667,
        "contract": "contracts/LargeGrant.sol:LargeGrant",
        "label": "grants",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(GrantData)1631_storage)"
      },
      {
        "astId": 1669,
        "contract": "contracts/LargeGrant.sol:LargeGrant",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Milestone)1649_storage)dyn_storage": {
        "base": "t_struct(Milestone)1649_storage",
        "encoding": "dynamic_array",
        "label": "struct LargeGrant.Milestone[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Stage)1638_storage)dyn_storage": {
        "base": "t_struct(Stage)1638_storage",
        "encoding": "dynamic_array",
        "label": "struct LargeGrant.Stage[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(GrantData)1631_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LargeGrant.GrantData)",
        "numberOfBytes": "32",
        "value": "t_struct(GrantData)1631_storage"
      },
      "t_struct(GrantData)1631_storage": {
        "encoding": "inplace",
        "label": "struct LargeGrant.GrantData",
        "members": [
          {
            "astId": 1626,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "builder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1630,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "stages",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Stage)1638_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Milestone)1649_storage": {
        "encoding": "inplace",
        "label": "struct LargeGrant.Milestone",
        "members": [
          {
            "astId": 1640,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1642,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1644,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "approvedBy",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1646,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "completedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1648,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "completed",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stage)1638_storage": {
        "encoding": "inplace",
        "label": "struct LargeGrant.Stage",
        "members": [
          {
            "astId": 1633,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 1637,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "milestones",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Milestone)1649_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}