{
  "address": "0x141EAdf50C94b91061A3be3B97e31BF938e6C341",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_initialStewards",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GrantAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GrantDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientContractFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MilestoneAlreadyApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MilestoneAlreadyCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MilestoneNeedsToBeApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MilestoneZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedsApprovalFromOtherSteward",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoMilestones",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongMilestoneNumber",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongStageNumber",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "grantId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "AddGrant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "grantId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stageNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "AddGrantStage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "grantId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stageNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "milestoneNumber",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approvedBy",
          "type": "address"
        }
      ],
      "name": "ApproveMilestone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "grantId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBuilder",
          "type": "address"
        }
      ],
      "name": "BuilderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "completedBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "grantId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "stageNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "milestoneNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proof",
          "type": "string"
        }
      ],
      "name": "CompleteMilestone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STEWARD_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_milestoneAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "addGrant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_milestoneAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "addGrantStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSteward",
          "type": "address"
        }
      ],
      "name": "addSteward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_stageNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_milestoneNumber",
          "type": "uint8"
        }
      ],
      "name": "approveMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_newBuilder",
          "type": "address"
        }
      ],
      "name": "changeBuilderAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_stageNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_milestoneNumber",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_proof",
          "type": "string"
        }
      ],
      "name": "completeMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_grantId",
          "type": "uint256"
        }
      ],
      "name": "grantData",
      "outputs": [
        {
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "stageNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "number",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "approvedBy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "completedBy",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "completed",
              "type": "bool"
            }
          ],
          "internalType": "struct LargeGrant.MilestoneData[]",
          "name": "milestones",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "grants",
      "outputs": [
        {
          "internalType": "address",
          "name": "builder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "steward",
          "type": "address"
        }
      ],
      "name": "removeSteward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x940d3d7e738ed4be1b10c3673d93e2e641d6a77ea5d0ecbc411ec95ac272b4b9",
  "receipt": {
    "to": null,
    "from": "0x99dc50727B2a52d291f506Fc4f4C3Cd6706aECE4",
    "contractAddress": "0x141EAdf50C94b91061A3be3B97e31BF938e6C341",
    "transactionIndex": 18,
    "gasUsed": "2081586",
    "logsBloom": "0x0000000400000000000000000400000000000000000000000000000040000000000000000000004000000100000000000000080040000040000000004010000040000000000000000000000000000000000000000000000000000000000000000000280002000c000000020000008800000000000000000000000000400000000000000010000100000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000001000000000000020001000000000000000000000000000000040000000080100000000000020000000001000000000000000000000000000000000000000000000000008002000",
    "blockHash": "0x09a39fb68dfc9bbb93aff5fc336ed9b07a61c7ead8900860f9a49fe439139e21",
    "transactionHash": "0x940d3d7e738ed4be1b10c3673d93e2e641d6a77ea5d0ecbc411ec95ac272b4b9",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 27116225,
        "transactionHash": "0x940d3d7e738ed4be1b10c3673d93e2e641d6a77ea5d0ecbc411ec95ac272b4b9",
        "address": "0x141EAdf50C94b91061A3be3B97e31BF938e6C341",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xbde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88ec",
          "0x00000000000000000000000055b9cb0bcf56057010b9c471e7d42d60e1111eea",
          "0x00000000000000000000000099dc50727b2a52d291f506fc4f4c3cd6706aece4"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0x09a39fb68dfc9bbb93aff5fc336ed9b07a61c7ead8900860f9a49fe439139e21"
      },
      {
        "transactionIndex": 18,
        "blockNumber": 27116225,
        "transactionHash": "0x940d3d7e738ed4be1b10c3673d93e2e641d6a77ea5d0ecbc411ec95ac272b4b9",
        "address": "0x141EAdf50C94b91061A3be3B97e31BF938e6C341",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xbde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88ec",
          "0x00000000000000000000000060583563d5879c2e59973e5718c7de2147971807",
          "0x00000000000000000000000099dc50727b2a52d291f506fc4f4c3cd6706aece4"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0x09a39fb68dfc9bbb93aff5fc336ed9b07a61c7ead8900860f9a49fe439139e21"
      },
      {
        "transactionIndex": 18,
        "blockNumber": 27116225,
        "transactionHash": "0x940d3d7e738ed4be1b10c3673d93e2e641d6a77ea5d0ecbc411ec95ac272b4b9",
        "address": "0x141EAdf50C94b91061A3be3B97e31BF938e6C341",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xbde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88ec",
          "0x000000000000000000000000b8224dfcf3c174331a8e6a841aeea7df321f6d8e",
          "0x00000000000000000000000099dc50727b2a52d291f506fc4f4c3cd6706aece4"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0x09a39fb68dfc9bbb93aff5fc336ed9b07a61c7ead8900860f9a49fe439139e21"
      },
      {
        "transactionIndex": 18,
        "blockNumber": 27116225,
        "transactionHash": "0x940d3d7e738ed4be1b10c3673d93e2e641d6a77ea5d0ecbc411ec95ac272b4b9",
        "address": "0x141EAdf50C94b91061A3be3B97e31BF938e6C341",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xbde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88ec",
          "0x000000000000000000000000b4f53bd85c00ef22946d24ae26bc38ac64f5e7b1",
          "0x00000000000000000000000099dc50727b2a52d291f506fc4f4c3cd6706aece4"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0x09a39fb68dfc9bbb93aff5fc336ed9b07a61c7ead8900860f9a49fe439139e21"
      },
      {
        "transactionIndex": 18,
        "blockNumber": 27116225,
        "transactionHash": "0x940d3d7e738ed4be1b10c3673d93e2e641d6a77ea5d0ecbc411ec95ac272b4b9",
        "address": "0x141EAdf50C94b91061A3be3B97e31BF938e6C341",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xbde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88ec",
          "0x0000000000000000000000005dcb5f4f39caa6ca25380cfc42280330b49d3c93",
          "0x00000000000000000000000099dc50727b2a52d291f506fc4f4c3cd6706aece4"
        ],
        "data": "0x",
        "logIndex": 54,
        "blockHash": "0x09a39fb68dfc9bbb93aff5fc336ed9b07a61c7ead8900860f9a49fe439139e21"
      },
      {
        "transactionIndex": 18,
        "blockNumber": 27116225,
        "transactionHash": "0x940d3d7e738ed4be1b10c3673d93e2e641d6a77ea5d0ecbc411ec95ac272b4b9",
        "address": "0x141EAdf50C94b91061A3be3B97e31BF938e6C341",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xbde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88ec",
          "0x0000000000000000000000006bb3a224d1db4ff1127e5c825941c4dc330cce2e",
          "0x00000000000000000000000099dc50727b2a52d291f506fc4f4c3cd6706aece4"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0x09a39fb68dfc9bbb93aff5fc336ed9b07a61c7ead8900860f9a49fe439139e21"
      },
      {
        "transactionIndex": 18,
        "blockNumber": 27116225,
        "transactionHash": "0x940d3d7e738ed4be1b10c3673d93e2e641d6a77ea5d0ecbc411ec95ac272b4b9",
        "address": "0x141EAdf50C94b91061A3be3B97e31BF938e6C341",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000099dc50727b2a52d291f506fc4f4c3cd6706aece4",
          "0x00000000000000000000000099dc50727b2a52d291f506fc4f4c3cd6706aece4"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0x09a39fb68dfc9bbb93aff5fc336ed9b07a61c7ead8900860f9a49fe439139e21"
      }
    ],
    "blockNumber": 27116225,
    "cumulativeGasUsed": "13457495",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9a297909d8c7cE5A17F68F26e87130eA22898eC2",
    [
      "0x55b9CB0bCf56057010b9c471e7D42d60e1111EEa",
      "0x60583563D5879C2E59973E5718c7DE2147971807",
      "0xb8224dfCf3C174331a8e6a841AEEa7dF321f6D8E",
      "0xB4F53bd85c00EF22946d24Ae26BC38Ac64F5E7B1",
      "0x5dCb5f4F39Caa6Ca25380cfc42280330b49d3c93",
      "0x6Bb3A224d1Db4ff1127E5c825941c4dc330cCE2e"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "544727ab2a156194686d51aec8e9e875",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_initialStewards\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GrantAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GrantDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientContractFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MilestoneAlreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MilestoneAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MilestoneNeedsToBeApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MilestoneZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedsApprovalFromOtherSteward\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoMilestones\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongMilestoneNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongStageNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"AddGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stageNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"AddGrantStage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stageNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"milestoneNumber\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approvedBy\",\"type\":\"address\"}],\"name\":\"ApproveMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBuilder\",\"type\":\"address\"}],\"name\":\"BuilderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"completedBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"grantId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stageNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"milestoneNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"CompleteMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STEWARD_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_milestoneAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addGrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_milestoneAmounts\",\"type\":\"uint256[]\"}],\"name\":\"addGrantStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSteward\",\"type\":\"address\"}],\"name\":\"addSteward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_stageNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_milestoneNumber\",\"type\":\"uint8\"}],\"name\":\"approveMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newBuilder\",\"type\":\"address\"}],\"name\":\"changeBuilderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_stageNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_milestoneNumber\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_proof\",\"type\":\"string\"}],\"name\":\"completeMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grantId\",\"type\":\"uint256\"}],\"name\":\"grantData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"stageNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"number\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"approvedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"completedBy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"internalType\":\"struct LargeGrant.MilestoneData[]\",\"name\":\"milestones\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"grants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"steward\",\"type\":\"address\"}],\"name\":\"removeSteward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LargeGrant.sol\":\"LargeGrant\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/LargeGrant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nabstract contract ERC20 {\\n\\tfunction transfer(\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) external virtual returns (bool);\\n\\n\\tfunction balanceOf(address account) external view virtual returns (uint256);\\n}\\n\\ncontract LargeGrant is Pausable, AccessControl {\\n\\tbytes32 public constant STEWARD_ROLE = keccak256(\\\"STEWARD_ROLE\\\");\\n\\n\\tstruct GrantData {\\n\\t\\taddress builder;\\n\\t\\tStage[] stages;\\n\\t}\\n\\n\\tstruct Stage {\\n\\t\\tuint8 number;\\n\\t\\tMilestone[] milestones;\\n\\t}\\n\\n\\tstruct Milestone {\\n\\t\\tuint8 number;\\n\\t\\tuint256 amount;\\n\\t\\taddress approvedBy;\\n\\t\\taddress completedBy;\\n\\t\\tbool completed;\\n\\t}\\n\\n\\t// used for view functions\\n\\tstruct MilestoneData {\\n\\t\\tuint8 stageNumber;\\n\\t\\tuint8 number;\\n\\t\\tuint256 amount;\\n\\t\\taddress approvedBy;\\n\\t\\taddress completedBy;\\n\\t\\tbool completed;\\n\\t}\\n\\n\\tmapping(uint256 => GrantData) public grants;\\n\\taddress public tokenAddress;\\n\\n\\tevent AddGrant(\\n\\t\\tuint256 indexed grantId,\\n\\t\\taddress indexed to,\\n\\t\\tuint256[] amounts\\n\\t);\\n\\tevent AddGrantStage(\\n\\t\\tuint256 indexed grantId,\\n\\t\\tuint8 stageNumber,\\n\\t\\tuint256[] amounts\\n\\t);\\n\\tevent ApproveMilestone(\\n\\t\\tuint256 indexed grantId,\\n\\t\\tuint8 stageNumber,\\n\\t\\tuint8 milestoneNumber,\\n\\t\\taddress indexed approvedBy\\n\\t);\\n\\tevent CompleteMilestone(\\n\\t\\taddress indexed completedBy,\\n\\t\\tuint256 indexed grantId,\\n\\t\\tuint8 stageNumber,\\n\\t\\tuint8 milestoneNumber,\\n\\t\\tuint256 amount,\\n\\t\\tstring description,\\n\\t\\tstring proof\\n\\t);\\n\\tevent BuilderChanged(uint256 indexed grantId, address indexed newBuilder);\\n\\n\\t// Custom errors\\n\\terror GrantAlreadyExists();\\n\\terror GrantDoesNotExist();\\n\\terror ZeroAddress();\\n\\terror MilestoneZeroAmount();\\n\\terror NoMilestones();\\n\\terror MilestoneAlreadyCompleted();\\n\\terror MilestoneAlreadyApproved();\\n\\terror MilestoneNeedsToBeApproved();\\n\\terror InsufficientContractFunds();\\n\\terror WrongStageNumber();\\n\\terror WrongMilestoneNumber();\\n\\terror NeedsApprovalFromOtherSteward();\\n\\terror AlreadyAdmin();\\n\\n\\tmodifier validMilestone(\\n\\t\\tuint256 _grantId,\\n\\t\\tuint8 _stageNumber,\\n\\t\\tuint8 _milestoneNumber\\n\\t) {\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (grant.builder == address(0)) {\\n\\t\\t\\trevert GrantDoesNotExist();\\n\\t\\t}\\n\\n\\t\\tif (_stageNumber == 0 || _stageNumber > grant.stages.length) {\\n\\t\\t\\trevert WrongStageNumber();\\n\\t\\t}\\n\\n\\t\\tif (\\n\\t\\t\\t_milestoneNumber > grant.stages[_stageNumber - 1].milestones.length\\n\\t\\t) {\\n\\t\\t\\trevert WrongMilestoneNumber();\\n\\t\\t}\\n\\n\\t\\tif (\\n\\t\\t\\tgrant\\n\\t\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t\\t.completed\\n\\t\\t) {\\n\\t\\t\\trevert MilestoneAlreadyCompleted();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address _tokenAddress, address[] memory _initialStewards) {\\n\\t\\ttokenAddress = _tokenAddress;\\n\\t\\tfor (uint i = 0; i < _initialStewards.length; i++) {\\n\\t\\t\\t_grantRole(STEWARD_ROLE, _initialStewards[i]);\\n\\t\\t}\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t}\\n\\n\\tfunction grantData(\\n\\t\\tuint256 _grantId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (address builder, MilestoneData[] memory milestones)\\n\\t{\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\t\\tbuilder = grant.builder;\\n\\n\\t\\tuint256 milestonesCount = 0;\\n\\n\\t\\tfor (uint i = 0; i < grant.stages.length; i++) {\\n\\t\\t\\tmilestonesCount += grant.stages[i].milestones.length;\\n\\t\\t}\\n\\n\\t\\tmilestones = new MilestoneData[](milestonesCount);\\n\\n\\t\\tuint256 index = 0;\\n\\t\\tfor (uint i = 0; i < grant.stages.length; i++) {\\n\\t\\t\\tfor (uint j = 0; j < grant.stages[i].milestones.length; j++) {\\n\\t\\t\\t\\tmilestones[index] = MilestoneData({\\n\\t\\t\\t\\t\\tstageNumber: uint8(i + 1),\\n\\t\\t\\t\\t\\tnumber: grant.stages[i].milestones[j].number,\\n\\t\\t\\t\\t\\tamount: grant.stages[i].milestones[j].amount,\\n\\t\\t\\t\\t\\tcompleted: grant.stages[i].milestones[j].completed,\\n\\t\\t\\t\\t\\tapprovedBy: grant.stages[i].milestones[j].approvedBy,\\n\\t\\t\\t\\t\\tcompletedBy: grant.stages[i].milestones[j].completedBy\\n\\t\\t\\t\\t});\\n\\t\\t\\t\\tindex++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction addGrant(\\n\\t\\taddress _builder,\\n\\t\\tuint256 _grantId,\\n\\t\\tuint256[] memory _milestoneAmounts\\n\\t) public onlyRole(STEWARD_ROLE) {\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (grant.builder != address(0)) {\\n\\t\\t\\trevert GrantAlreadyExists();\\n\\t\\t}\\n\\n\\t\\tif (_builder == address(0)) {\\n\\t\\t\\trevert ZeroAddress();\\n\\t\\t}\\n\\n\\t\\tif (_milestoneAmounts.length == 0) {\\n\\t\\t\\trevert NoMilestones();\\n\\t\\t}\\n\\n\\t\\tgrant.builder = _builder;\\n\\n\\t\\tStage storage stage = grant.stages.push();\\n\\t\\tstage.number = 1;\\n\\n\\t\\tfor (uint i = 0; i < _milestoneAmounts.length; i++) {\\n\\t\\t\\tuint256 amount = _milestoneAmounts[i];\\n\\t\\t\\tif (amount == 0) {\\n\\t\\t\\t\\trevert MilestoneZeroAmount();\\n\\t\\t\\t}\\n\\t\\t\\tstage.milestones.push(\\n\\t\\t\\t\\tMilestone({\\n\\t\\t\\t\\t\\tnumber: uint8(i + 1),\\n\\t\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\t\\tcompleted: false,\\n\\t\\t\\t\\t\\tapprovedBy: address(0),\\n\\t\\t\\t\\t\\tcompletedBy: address(0)\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit AddGrant(_grantId, _builder, _milestoneAmounts);\\n\\t}\\n\\n\\tfunction addGrantStage(\\n\\t\\tuint256 _grantId,\\n\\t\\tuint256[] memory _milestoneAmounts\\n\\t) public onlyRole(STEWARD_ROLE) {\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (grant.builder == address(0)) {\\n\\t\\t\\trevert GrantDoesNotExist();\\n\\t\\t}\\n\\n\\t\\tif (_milestoneAmounts.length == 0) {\\n\\t\\t\\trevert NoMilestones();\\n\\t\\t}\\n\\n\\t\\tStage storage stage = grant.stages.push();\\n\\n\\t\\tstage.number = uint8(grant.stages.length);\\n\\n\\t\\tfor (uint i = 0; i < _milestoneAmounts.length; i++) {\\n\\t\\t\\tuint256 amount = _milestoneAmounts[i];\\n\\t\\t\\tif (amount == 0) {\\n\\t\\t\\t\\trevert MilestoneZeroAmount();\\n\\t\\t\\t}\\n\\t\\t\\tstage.milestones.push(\\n\\t\\t\\t\\tMilestone({\\n\\t\\t\\t\\t\\tnumber: uint8(i + 1),\\n\\t\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\t\\tcompleted: false,\\n\\t\\t\\t\\t\\tapprovedBy: address(0),\\n\\t\\t\\t\\t\\tcompletedBy: address(0)\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit AddGrantStage(\\n\\t\\t\\t_grantId,\\n\\t\\t\\tuint8(grant.stages.length),\\n\\t\\t\\t_milestoneAmounts\\n\\t\\t);\\n\\t}\\n\\n\\tfunction approveMilestone(\\n\\t\\tuint256 _grantId,\\n\\t\\tuint8 _stageNumber,\\n\\t\\tuint8 _milestoneNumber\\n\\t)\\n\\t\\tpublic\\n\\t\\twhenNotPaused\\n\\t\\tonlyRole(STEWARD_ROLE)\\n\\t\\tvalidMilestone(_grantId, _stageNumber, _milestoneNumber)\\n\\t{\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (\\n\\t\\t\\tgrant\\n\\t\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t\\t.approvedBy != address(0)\\n\\t\\t) {\\n\\t\\t\\trevert MilestoneAlreadyApproved();\\n\\t\\t}\\n\\n\\t\\tgrant\\n\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t.approvedBy = msg.sender;\\n\\n\\t\\temit ApproveMilestone(\\n\\t\\t\\t_grantId,\\n\\t\\t\\t_stageNumber,\\n\\t\\t\\t_milestoneNumber,\\n\\t\\t\\tmsg.sender\\n\\t\\t);\\n\\t}\\n\\n\\tfunction completeMilestone(\\n\\t\\tuint256 _grantId,\\n\\t\\tuint8 _stageNumber,\\n\\t\\tuint8 _milestoneNumber,\\n\\t\\tstring memory _description,\\n\\t\\tstring memory _proof\\n\\t)\\n\\t\\tpublic\\n\\t\\twhenNotPaused\\n\\t\\tonlyRole(STEWARD_ROLE)\\n\\t\\tvalidMilestone(_grantId, _stageNumber, _milestoneNumber)\\n\\t{\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (\\n\\t\\t\\tgrant\\n\\t\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t\\t.approvedBy == address(0)\\n\\t\\t) {\\n\\t\\t\\trevert MilestoneNeedsToBeApproved();\\n\\t\\t}\\n\\n\\t\\tif (\\n\\t\\t\\tgrant\\n\\t\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t\\t.approvedBy == msg.sender\\n\\t\\t) {\\n\\t\\t\\trevert NeedsApprovalFromOtherSteward();\\n\\t\\t}\\n\\n\\t\\tuint256 amount = grant\\n\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t.amount;\\n\\n\\t\\tif (ERC20(tokenAddress).balanceOf(address(this)) < amount)\\n\\t\\t\\trevert InsufficientContractFunds();\\n\\n\\t\\tERC20(tokenAddress).transfer(grant.builder, amount);\\n\\n\\t\\tgrant\\n\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t.completed = true;\\n\\n\\t\\tgrant\\n\\t\\t\\t.stages[_stageNumber - 1]\\n\\t\\t\\t.milestones[_milestoneNumber - 1]\\n\\t\\t\\t.completedBy = msg.sender;\\n\\n\\t\\temit CompleteMilestone(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_grantId,\\n\\t\\t\\t_stageNumber,\\n\\t\\t\\t_milestoneNumber,\\n\\t\\t\\tamount,\\n\\t\\t\\t_description,\\n\\t\\t\\t_proof\\n\\t\\t);\\n\\t}\\n\\n\\tfunction changeBuilderAddress(\\n\\t\\tuint256 _grantId,\\n\\t\\taddress _newBuilder\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tif (_newBuilder == address(0)) {\\n\\t\\t\\trevert ZeroAddress();\\n\\t\\t}\\n\\n\\t\\tGrantData storage grant = grants[_grantId];\\n\\n\\t\\tif (grant.builder == address(0)) {\\n\\t\\t\\trevert GrantDoesNotExist();\\n\\t\\t}\\n\\n\\t\\tgrant.builder = _newBuilder;\\n\\n\\t\\temit BuilderChanged(_grantId, _newBuilder);\\n\\t}\\n\\n\\tfunction addSteward(\\n\\t\\taddress newSteward\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tgrantRole(STEWARD_ROLE, newSteward);\\n\\t}\\n\\n\\tfunction removeSteward(\\n\\t\\taddress steward\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trevokeRole(STEWARD_ROLE, steward);\\n\\t}\\n\\n\\tfunction transferAdmin(\\n\\t\\taddress newAdmin\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tif (hasRole(DEFAULT_ADMIN_ROLE, newAdmin)) revert AlreadyAdmin();\\n\\n\\t\\tgrantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n\\t\\trenounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\t}\\n\\n\\tfunction pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\t_unpause();\\n\\t}\\n}\\n\",\"keccak256\":\"0xe9d316e16a4db4c4626e7fd5bf7859c490d44672c6f98a6b8bd8bf2691dc1a45\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620023b6380380620023b68339810160408190526200003491620001a5565b6000805460ff19168155600380546001600160a01b0319166001600160a01b0385161790555b8151811015620000c757620000b27fbde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88ec8383815181106200009e576200009e6200028e565b6020026020010151620000dd60201b60201c565b80620000be81620002a4565b9150506200005a565b50620000d560003362000166565b5050620002cc565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620001625760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45b5050565b620001628282620000dd565b80516001600160a01b03811681146200018a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620001b957600080fd5b620001c48362000172565b602084810151919350906001600160401b0380821115620001e457600080fd5b818601915086601f830112620001f957600080fd5b8151818111156200020e576200020e6200018f565b8060051b604051601f19603f830116810181811085821117156200023657620002366200018f565b6040529182528482019250838101850191898311156200025557600080fd5b938501935b828510156200027e576200026e8562000172565b845293850193928501926200025a565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b600060018201620002c557634e487b7160e01b600052601160045260246000fd5b5060010190565b6120da80620002dc6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806375829def116100b8578063b1bbdd751161007c578063b1bbdd75146102c2578063b75942f7146102d5578063caab0729146102e8578063d547741f146102fb578063d7972ab91461030e578063e5c889871461032157600080fd5b806375829def146102795780638456cb591461028c57806391d14854146102945780639d76ea58146102a7578063a217fddf146102ba57600080fd5b806336568abe1161010a57806336568abe146102185780633f4ba83a1461022b578063424f48c2146102335780635c975abb146102465780636430591614610251578063676bb0ca1461026657600080fd5b806301ffc9a7146101475780630c0debea1461016f578063248a9ca3146101b05780632f2ff15d146101e25780632f9c652e146101f7575b600080fd5b61015a610155366004611a28565b610334565b60405190151581526020015b60405180910390f35b61019861017d366004611a52565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610166565b6101d46101be366004611a52565b6000908152600160208190526040909120015490565b604051908152602001610166565b6101f56101f0366004611a87565b61036b565b005b61020a610205366004611a52565b610396565b604051610166929190611ab3565b6101f5610226366004611a87565b6106fb565b6101f561077e565b6101f5610241366004611c13565b610794565b60005460ff1661015a565b6101d460008051602061208583398151915281565b6101f5610274366004611ca2565b610d15565b6101f5610287366004611cde565b61101b565b6101f5611065565b61015a6102a2366004611a87565b611078565b600354610198906001600160a01b031681565b6101d4600081565b6101f56102d0366004611d79565b6110a3565b6101f56102e3366004611dc0565b6112b3565b6101f56102f6366004611cde565b6114fe565b6101f5610309366004611a87565b611521565b6101f561031c366004611a87565b611547565b6101f561032f366004611cde565b6115fb565b60006001600160e01b03198216637965db0b60e01b148061036557506301ffc9a760e01b6001600160e01b03198316145b92915050565b600082815260016020819052604090912001546103878161161e565b6103918383611628565b505050565b600081815260026020526040812080546001600160a01b03169160609190805b6001830154811015610409578260010181815481106103d7576103d7611e17565b60009182526020909120600160029092020101546103f59083611e43565b91508061040181611e56565b9150506103b6565b508067ffffffffffffffff81111561042357610423611b5c565b60405190808252806020026020018201604052801561048357816020015b6040805160c08101825260008082526020808301829052928201819052606082018190526080820181905260a082015282526000199092019101816104415790505b5092506000805b60018401548110156106f25760005b8460010182815481106104ae576104ae611e17565b9060005260206000209060020201600101805490508110156106df576040518060c001604052808360016104e29190611e43565b60ff1681526020018660010184815481106104ff576104ff611e17565b9060005260206000209060020201600101838154811061052157610521611e17565b60009182526020918290206004909102015460ff16825260018801805492909101918590811061055357610553611e17565b9060005260206000209060020201600101838154811061057557610575611e17565b90600052602060002090600402016001015481526020018660010184815481106105a1576105a1611e17565b906000526020600020906002020160010183815481106105c3576105c3611e17565b6000918252602091829020600260049092020101546001600160a01b031682526001880180549290910191859081106105fe576105fe611e17565b9060005260206000209060020201600101838154811061062057610620611e17565b6000918252602091829020600360049092020101546001600160a01b0316825260018801805492909101918590811061065b5761065b611e17565b9060005260206000209060020201600101838154811061067d5761067d611e17565b906000526020600020906004020160030160149054906101000a900460ff1615158152508684815181106106b3576106b3611e17565b602002602001018190525082806106c990611e56565b93505080806106d790611e56565b915050610499565b50806106ea81611e56565b91505061048a565b50505050915091565b6001600160a01b03811633146107705760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61077a8282611693565b5050565b60006107898161161e565b6107916116fa565b50565b61079c61174c565b6000805160206120858339815191526107b48161161e565b60008681526002602052604090208054879187918791906001600160a01b03166107f157604051639bfaf8b960e01b815260040160405180910390fd5b60ff831615806108075750600181015460ff8416115b1561082557604051633dea701360e11b815260040160405180910390fd5b806001016001846108369190611e6f565b60ff168154811061084957610849611e17565b9060005260206000209060020201600101805490508260ff161115610881576040516331ca8e3960e11b815260040160405180910390fd5b806001016001846108929190611e6f565b60ff16815481106108a5576108a5611e17565b90600052602060002090600202016001016001836108c39190611e6f565b60ff16815481106108d6576108d6611e17565b906000526020600020906004020160030160149054906101000a900460ff161561091357604051634cf723ed60e01b815260040160405180910390fd5b60008a815260026020526040812090600180830190610932908d611e6f565b60ff168154811061094557610945611e17565b906000526020600020906002020160010160018b6109639190611e6f565b60ff168154811061097657610976611e17565b60009182526020909120600260049092020101546001600160a01b0316036109b157604051633fe9403960e11b815260040160405180910390fd5b336001808301906109c2908d611e6f565b60ff16815481106109d5576109d5611e17565b906000526020600020906002020160010160018b6109f39190611e6f565b60ff1681548110610a0657610a06611e17565b60009182526020909120600260049092020101546001600160a01b031603610a41576040516321304aa360e11b815260040160405180910390fd5b60008160010160018c610a549190611e6f565b60ff1681548110610a6757610a67611e17565b906000526020600020906002020160010160018b610a859190611e6f565b60ff1681548110610a9857610a98611e17565b60009182526020909120600491820201600101546003546040516370a0823160e01b8152309381019390935290925082916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1f9190611e88565b1015610b3e5760405163a3fb8f9d60e01b815260040160405180910390fd5b600354825460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af1158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb69190611ea1565b506001828101610bc6828e611e6f565b60ff1681548110610bd957610bd9611e17565b906000526020600020906002020160010160018c610bf79190611e6f565b60ff1681548110610c0a57610c0a611e17565b906000526020600020906004020160030160146101000a81548160ff021916908315150217905550338260010160018d610c449190611e6f565b60ff1681548110610c5757610c57611e17565b906000526020600020906002020160010160018c610c759190611e6f565b60ff1681548110610c8857610c88611e17565b906000526020600020906004020160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508b336001600160a01b03167f72abd0da86376befd0fbb67b56a7a2af667bc7fc3383f22b8cfcb5f52c0427278d8d858e8e604051610cff959493929190611f13565b60405180910390a3505050505050505050505050565b610d1d61174c565b600080516020612085833981519152610d358161161e565b60008481526002602052604090208054859185918591906001600160a01b0316610d7257604051639bfaf8b960e01b815260040160405180910390fd5b60ff83161580610d885750600181015460ff8416115b15610da657604051633dea701360e11b815260040160405180910390fd5b80600101600184610db79190611e6f565b60ff1681548110610dca57610dca611e17565b9060005260206000209060020201600101805490508260ff161115610e02576040516331ca8e3960e11b815260040160405180910390fd5b80600101600184610e139190611e6f565b60ff1681548110610e2657610e26611e17565b9060005260206000209060020201600101600183610e449190611e6f565b60ff1681548110610e5757610e57611e17565b906000526020600020906004020160030160149054906101000a900460ff1615610e9457604051634cf723ed60e01b815260040160405180910390fd5b600088815260026020526040812090600180830190610eb3908b611e6f565b60ff1681548110610ec657610ec6611e17565b9060005260206000209060020201600101600189610ee49190611e6f565b60ff1681548110610ef757610ef7611e17565b60009182526020909120600260049092020101546001600160a01b031614610f3257604051630535ed3960e41b815260040160405180910390fd5b338160010160018a610f449190611e6f565b60ff1681548110610f5757610f57611e17565b9060005260206000209060020201600101600189610f759190611e6f565b60ff1681548110610f8857610f88611e17565b906000526020600020906004020160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550336001600160a01b0316897f79d5a3d0c1f411a1366ed6aa9d367fcb88b5c450d080d8ef6a98b5a5564b39bb8a8a60405161100892919060ff92831681529116602082015260400190565b60405180910390a3505050505050505050565b60006110268161161e565b611031600083611078565b1561104f57604051631c3681a560e11b815260040160405180910390fd5b61105a60008361036b565b61077a6000336106fb565b60006110708161161e565b610791611794565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000805160206120858339815191526110bb8161161e565b600083815260026020526040902080546001600160a01b03166110f157604051639bfaf8b960e01b815260040160405180910390fd5b825160000361111357604051631712a07360e21b815260040160405180910390fd5b600181810180549182018082556000918252602082206002909302909201805460ff191660ff9093169290921782555b845181101561126b57600085828151811061116057611160611e17565b602002602001015190508060000361118b5760405163661425c560e01b815260040160405180910390fd5b826001016040518060a001604052808460016111a79190611e43565b60ff90811682526020808301959095526000604080840182905260608085018390526080948501839052865460018082018955978452928890208651600490940201805460ff1916939094169290921783559584015194820194909455938201516002850180546001600160a01b0319166001600160a01b0392831617905592820151600390940180549290910151939092166001600160a81b031990911617600160a01b921515929092029190911790558061126381611e56565b915050611143565b50600182015460405186917fb89a18737047fddd3ef8fcad9989a4135edcfa3f60e09630367cc801e100ee35916112a491908890611f97565b60405180910390a25050505050565b6000805160206120858339815191526112cb8161161e565b600083815260026020526040902080546001600160a01b03161561130257604051631750e92d60e11b815260040160405180910390fd5b6001600160a01b0385166113295760405163d92e233d60e01b815260040160405180910390fd5b825160000361134b57604051631712a07360e21b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b038616178155600180820180548083018255600091825260208220600290910201805460ff191690921782555b84518110156114b35760008582815181106113a8576113a8611e17565b60200260200101519050806000036113d35760405163661425c560e01b815260040160405180910390fd5b826001016040518060a001604052808460016113ef9190611e43565b60ff90811682526020808301959095526000604080840182905260608085018390526080948501839052865460018082018955978452928890208651600490940201805460ff1916939094169290921783559584015194820194909455938201516002850180546001600160a01b0319166001600160a01b0392831617905592820151600390940180549290910151939092166001600160a81b031990911617600160a01b92151592909202919091179055806114ab81611e56565b91505061138b565b50856001600160a01b0316857f216f429a39cd81efeeb1ca75c55036d93fb1388e004101fd68549352f224a825866040516114ee9190611fbb565b60405180910390a3505050505050565b60006115098161161e565b61077a6000805160206120858339815191528361036b565b6000828152600160208190526040909120015461153d8161161e565b6103918383611693565b60006115528161161e565b6001600160a01b0382166115795760405163d92e233d60e01b815260040160405180910390fd5b600083815260026020526040902080546001600160a01b03166115af57604051639bfaf8b960e01b815260040160405180910390fd5b80546001600160a01b0319166001600160a01b038416908117825560405185907f1e410b55c818b30b1a663bc61e32e940872f015d621e8f375c7cd7bb6079de4690600090a350505050565b60006116068161161e565b61077a60008051602061208583398151915283611521565b61079181336117d1565b6116328282611078565b61077a5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b61169d8282611078565b1561077a5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61170261182a565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16156117925760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610767565b565b61179c61174c565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861172f3390565b6117db8282611078565b61077a576117e881611873565b6117f3836020611885565b604051602001611804929190611fce565b60408051601f198184030181529082905262461bcd60e51b825261076791600401612043565b60005460ff166117925760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610767565b60606103656001600160a01b03831660145b60606000611894836002612056565b61189f906002611e43565b67ffffffffffffffff8111156118b7576118b7611b5c565b6040519080825280601f01601f1916602001820160405280156118e1576020820181803683370190505b509050600360fc1b816000815181106118fc576118fc611e17565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061192b5761192b611e17565b60200101906001600160f81b031916908160001a905350600061194f846002612056565b61195a906001611e43565b90505b60018111156119d2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061198e5761198e611e17565b1a60f81b8282815181106119a4576119a4611e17565b60200101906001600160f81b031916908160001a90535060049490941c936119cb8161206d565b905061195d565b508315611a215760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610767565b9392505050565b600060208284031215611a3a57600080fd5b81356001600160e01b031981168114611a2157600080fd5b600060208284031215611a6457600080fd5b5035919050565b80356001600160a01b0381168114611a8257600080fd5b919050565b60008060408385031215611a9a57600080fd5b82359150611aaa60208401611a6b565b90509250929050565b6001600160a01b038381168252604060208084018290528451848301819052600093606092909183870190888301875b82811015611b3b578151805160ff908116865286820151168686015288810151898601528781015187168886015260808082015188169086015260a09081015115159085015260c09093019290840190600101611ae3565b50919a9950505050505050505050565b803560ff81168114611a8257600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611b9b57611b9b611b5c565b604052919050565b600082601f830112611bb457600080fd5b813567ffffffffffffffff811115611bce57611bce611b5c565b611be1601f8201601f1916602001611b72565b818152846020838601011115611bf657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a08688031215611c2b57600080fd5b85359450611c3b60208701611b4b565b9350611c4960408701611b4b565b9250606086013567ffffffffffffffff80821115611c6657600080fd5b611c7289838a01611ba3565b93506080880135915080821115611c8857600080fd5b50611c9588828901611ba3565b9150509295509295909350565b600080600060608486031215611cb757600080fd5b83359250611cc760208501611b4b565b9150611cd560408501611b4b565b90509250925092565b600060208284031215611cf057600080fd5b611a2182611a6b565b600082601f830112611d0a57600080fd5b8135602067ffffffffffffffff821115611d2657611d26611b5c565b8160051b611d35828201611b72565b9283528481018201928281019087851115611d4f57600080fd5b83870192505b84831015611d6e57823582529183019190830190611d55565b979650505050505050565b60008060408385031215611d8c57600080fd5b82359150602083013567ffffffffffffffff811115611daa57600080fd5b611db685828601611cf9565b9150509250929050565b600080600060608486031215611dd557600080fd5b611dde84611a6b565b925060208401359150604084013567ffffffffffffffff811115611e0157600080fd5b611e0d86828701611cf9565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561036557610365611e2d565b600060018201611e6857611e68611e2d565b5060010190565b60ff828116828216039081111561036557610365611e2d565b600060208284031215611e9a57600080fd5b5051919050565b600060208284031215611eb357600080fd5b81518015158114611a2157600080fd5b60005b83811015611ede578181015183820152602001611ec6565b50506000910152565b60008151808452611eff816020860160208601611ec3565b601f01601f19169290920160200192915050565b60ff8616815260ff8516602082015283604082015260a060608201526000611f3e60a0830185611ee7565b8281036080840152611f508185611ee7565b98975050505050505050565b600081518084526020808501945080840160005b83811015611f8c57815187529582019590820190600101611f70565b509495945050505050565b60ff83168152604060208201526000611fb36040830184611f5c565b949350505050565b602081526000611a216020830184611f5c565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612006816017850160208801611ec3565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612037816028840160208801611ec3565b01602801949350505050565b602081526000611a216020830184611ee7565b808202811582820484141761036557610365611e2d565b60008161207c5761207c611e2d565b50600019019056febde745d383bd90948c6bf528cf5a56a9fe775bfee56a5d53b36fd785802b88eca2646970667358221220c151fb4549a994e08ae12a0e690c614db9a0606cd91166a1fe4cdbb8cd7d97da64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 406,
        "contract": "contracts/LargeGrant.sol:LargeGrant",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 24,
        "contract": "contracts/LargeGrant.sol:LargeGrant",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2357,
        "contract": "contracts/LargeGrant.sol:LargeGrant",
        "label": "grants",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(GrantData)2321_storage)"
      },
      {
        "astId": 2359,
        "contract": "contracts/LargeGrant.sol:LargeGrant",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Milestone)2339_storage)dyn_storage": {
        "base": "t_struct(Milestone)2339_storage",
        "encoding": "dynamic_array",
        "label": "struct LargeGrant.Milestone[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Stage)2328_storage)dyn_storage": {
        "base": "t_struct(Stage)2328_storage",
        "encoding": "dynamic_array",
        "label": "struct LargeGrant.Stage[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(GrantData)2321_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LargeGrant.GrantData)",
        "numberOfBytes": "32",
        "value": "t_struct(GrantData)2321_storage"
      },
      "t_struct(GrantData)2321_storage": {
        "encoding": "inplace",
        "label": "struct LargeGrant.GrantData",
        "members": [
          {
            "astId": 2316,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "builder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2320,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "stages",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Stage)2328_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Milestone)2339_storage": {
        "encoding": "inplace",
        "label": "struct LargeGrant.Milestone",
        "members": [
          {
            "astId": 2330,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2332,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2334,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "approvedBy",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2336,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "completedBy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2338,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "completed",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stage)2328_storage": {
        "encoding": "inplace",
        "label": "struct LargeGrant.Stage",
        "members": [
          {
            "astId": 2323,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "number",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2327,
            "contract": "contracts/LargeGrant.sol:LargeGrant",
            "label": "milestones",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Milestone)2339_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}